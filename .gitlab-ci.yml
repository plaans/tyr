---
stages:
  - Build
  - Static Analysis
  - Tests
  - Release

variables:
  DEFAULT_PYTHON_VERSION: "3.12"
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_REQUIREMENTS_TARGET: "ci"

cache:
  paths:
    - .cache/pip
    - .venv

default:
  image: $CI_REGISTRY_IMAGE
  interruptible: true

# ============================================================================ #
#                                     Build                                    #
# ============================================================================ #

docker:
  stage: Build
  image: gitlab/dind
  services:
    - docker:dind
  rules:
    - changes:
        - Dockerfile
        - Justfile
        - .gitlab-ci.yml
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE --no-cache .
    - docker push $CI_REGISTRY_IMAGE

# ============================================================================ #
#                                Static Analysis                               #
# ============================================================================ #

.static-analysis-job:
  stage: Static Analysis
  allow_failure: true
  before_script:
    - just reset $PYTHON_REQUIREMENTS_TARGET $DEFAULT_PYTHON_VERSION
    - .venv/bin/python --version
  parallel:
    matrix:
      - DIR: [src, tests]
  rules:
    - exists:
        - "$DIR/**/*.py"

bandit:
  extends: .static-analysis-job
  script:
    - just _lint bandit "$DIR" -r -c pyproject.toml

black:
  extends: .static-analysis-job
  script:
    - just _lint black "$DIR" --check

flake8:
  extends: .static-analysis-job
  script:
    - just _lint flake8 "$DIR"

isort:
  extends: .static-analysis-job
  script:
    - just _lint isort "$DIR" --check-only

mypy:
  extends: .static-analysis-job
  script:
    - just _lint mypy "$DIR"

pylint:
  extends: .static-analysis-job
  script:
    - just _lint pylint "$DIR"

commitlint:
  stage: Static Analysis
  image: node:latest
  before_script:
    - npm install --save-dev @commitlint/cli @commitlint/config-conventional
  script:
    - npx commitlint --from ${CI_MERGE_REQUEST_TARGET_BRANCH_SHA} --to HEAD --verbose

# ============================================================================ #
#                                     Test                                     #
# ============================================================================ #

.test-job:
  stage: Tests
  needs: ["docker"]
  rules:
    - exists:
        - tests/**/*.py

tests:
  extends: .test-job
  parallel:
    matrix:
      - VERSION: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  before_script:
    - just reset $PYTHON_REQUIREMENTS_TARGET $VERSION
  script:
    - just test-all tests --junitxml report.xml
  artifacts:
    when: always
    expire_in: 1 month
    reports:
      junit: report.xml

coverage:
  extends: .test-job
  before_script:
    - just reset $PYTHON_REQUIREMENTS_TARGET $DEFAULT_PYTHON_VERSION
  script:
    - just _cov-ci
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    expire_in: 1 month
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

# ============================================================================ #
#                                    Release                                   #
# ============================================================================ #

semantic-release:
  stage: Release
  image: node:latest
  before_script:
    - npm install --save-dev conventional-changelog-conventionalcommits semantic-release @semantic-release/changelog @semantic-release/exec @semantic-release/git @semantic-release/gitlab-config
  script:
    - npx semantic-release
