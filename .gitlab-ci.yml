---
stages:
  - Static Analysis
  - Tests
  - Release

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PATH: "${PATH}:/root/.cargo/bin/"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .venv
    - libs/aries

default:
  image: $CI_REGISTRY_IMAGE
  interruptible: true

.python-job:
  before_script:
    - python3.12 --version ; python3.12 -m pip --version
    - python3.12 -m pip install virtualenv
    - python3.12 -m virtualenv .venv
    - source .venv/bin/activate
    - cargo build --release --bin up-server --manifest-path libs/aries/Cargo.toml
    - cp libs/aries/target/release/up-server libs/aries/planning/unified/plugin/up_aries/bin/up-aries_linux_amd64
    - pip install -r requirements/dev.txt

# ============================================================================ #
#                                Static Analysis                               #
# ============================================================================ #

.static-analysis-job:
  extends: .python-job
  stage: Static Analysis
  allow_failure: true
  parallel:
    matrix:
      - DIR: [src, tests]
  rules:
    - exists:
        - "$DIR/**/*.py"

bandit:
  extends: .static-analysis-job
  script:
    - bandit -r -c pyproject.toml "$DIR"

black:
  extends: .static-analysis-job
  script:
    - black --check "$DIR"

flake8:
  extends: .static-analysis-job
  script:
    - flake8 "$DIR"

isort:
  extends: .static-analysis-job
  script:
    - isort "$DIR" --check-only

mypy:
  extends: .static-analysis-job
  script:
    - mypy "$DIR"

pylint:
  extends: .static-analysis-job
  script:
    - pylint "$DIR"

commitlint:
  stage: Static Analysis
  before_script:
    - npm install --save-dev @commitlint/cli @commitlint/config-conventional
  script:
    - npx commitlint --from ${CI_MERGE_REQUEST_TARGET_BRANCH_SHA} --to HEAD --verbose

# ============================================================================ #
#                                     Test                                     #
# ============================================================================ #

.test-job:
  extends: .python-job
  stage: Tests
  needs: []
  rules:
    - exists:
        - tests/**/*.py

# tests:
#   extends: .test-job
#   parallel:
#     matrix:
#       - VERSION: ["3.8", "3.9", "3.10", "3.11", "3.12"]
#   image: python:$VERSION
#   script:
#     - pytest tests --junitxml report.xml
#   artifacts:
#     when: always
#     expire_in: 1 month
#     reports:
#       junit: report.xml

tests:
  extends: .test-job
  script:
    - pytest tests --junitxml report.xml
  artifacts:
    when: always
    expire_in: 1 month
    reports:
      junit: report.xml

coverage:
  extends: .test-job
  script:
    - pytest tests --cov src --cov-report term --cov-report xml --junitxml report.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    expire_in: 1 month
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

# ============================================================================ #
#                                    Release                                   #
# ============================================================================ #

semantic-release:
  stage: Release
  before_script:
    - npm install --save-dev conventional-changelog-conventionalcommits semantic-release @semantic-release/changelog @semantic-release/exec @semantic-release/git @semantic-release/gitlab-config
  script:
    - npx semantic-release
